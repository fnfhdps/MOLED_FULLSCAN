#pragma once

#ifdef DLL_EXPORTS
#define DllExport   __declspec( dllexport )
#else
#define DllExport   __declspec( dllimport )
#endif

//	정규분포 표준 편차로 z score 변환
static const double z_score_table[35][10] = {
	/*Z			0				1				2				3				4				5				6				7				8			9 */
	/*0	*/	{ 0.25			, 0.251994678	, 0.253989157	, 0.255983237	, 0.257976718	, 0.259969403	, 0.261961091	, 0.263951585	, 0.265940686	, 0.267928196 },
	/*1	*/	{ 0.269913919	, 0.271897656	, 0.273879213	, 0.275858393	, 0.277835002	, 0.279808846	, 0.281779731	, 0.283747466	, 0.285711858	, 0.287672717 },
	/*2	*/	{ 0.289629855	, 0.291583082	, 0.293532211	, 0.295477058	, 0.297417436	, 0.299353163	, 0.301284057	, 0.303209937	, 0.305130624	, 0.307045941 },
	/*3	*/	{ 0.308955711	, 0.310859761	, 0.312757917	, 0.314650009	, 0.316535868	, 0.318415326	, 0.320288217	, 0.322154377	, 0.324013646	, 0.325865863 },
	/*4	*/	{ 0.327710871	, 0.329548513	, 0.331378637	, 0.33320109	, 0.335015723	, 0.33682239	, 0.338620945	, 0.340411246	, 0.342193152	, 0.343966525 },
	/*5	*/	{ 0.345731231	, 0.347487135	, 0.349234106	, 0.350972017	, 0.352700742	, 0.354420157	, 0.356130141	, 0.357830575	, 0.359521346	, 0.361202338 },
	/*6	*/	{ 0.362873441	, 0.364534548	, 0.366185553	, 0.367826354	, 0.36945685	, 0.371076945	, 0.372686543	, 0.374285552	, 0.375873885	, 0.377451453 },
	/*7	*/	{ 0.379018174	, 0.380573966	, 0.382118751	, 0.383652454	, 0.385175001	, 0.386686324	, 0.388186354	, 0.389675027	, 0.391152281	, 0.392618058 },
	/*8	*/	{ 0.394072301	, 0.395514956	, 0.396945973	, 0.398365304	, 0.399772903	, 0.401168728	, 0.402552739	, 0.403924899	, 0.405285173	, 0.406633528 },
	/*9	*/	{ 0.407969937	, 0.409294373	, 0.41060681	, 0.411907229	, 0.41319561	, 0.414471937	, 0.415736196	, 0.416988377	, 0.41822847	, 0.41945647  },
	/*10*/	{ 0.420672373	, 0.421876177	, 0.423067885	, 0.424247499	, 0.425415025	, 0.426570472	, 0.42771385	, 0.428845173	, 0.429964455	, 0.431071714 },
	/*11*/	{ 0.43216697	, 0.433250243	, 0.434321559	, 0.435380944	, 0.436428425	, 0.437464032	, 0.438487798	, 0.439499758	, 0.440499946	, 0.441488402 },
	/*12*/	{ 0.442465165	, 0.443430277	, 0.444383781	, 0.445325724	, 0.446256151	, 0.447175113	, 0.448082659	, 0.448978842	, 0.449863716	, 0.450737335 },
	/*13*/	{ 0.451599758	, 0.452451041	, 0.453291246	, 0.454120432	, 0.454938664	, 0.455746004	, 0.456542519	, 0.457328275	, 0.458103339	, 0.458867781 },
	/*14*/	{ 0.45962167	, 0.460365079	, 0.46109808	, 0.461820745	, 0.46253315	, 0.46323537	, 0.463927482	, 0.464609562	, 0.465281688	, 0.465943941 },
	/*15*/	{ 0.466596399	, 0.467239144	, 0.467872256	, 0.468495818	, 0.469109912	, 0.469714621	, 0.47031003	, 0.470896222	, 0.471473283	, 0.472041299 },
	/*16*/	{ 0.472600354	, 0.473150536	, 0.473691931	, 0.474224626	, 0.474748708	, 0.475264266	, 0.475771387	, 0.476270159	, 0.476760671	, 0.477243011 },
	/*17*/	{ 0.477717269	, 0.478183532	, 0.47864189	, 0.479092431	, 0.479535246	, 0.479970422	, 0.480398048	, 0.480818215	, 0.48123101	, 0.481636522 },
	/*18*/	{ 0.48203484	, 0.482426053	, 0.482810249	, 0.483187515	, 0.483557941	, 0.483921613	, 0.484278619	, 0.484629046	, 0.484972981	, 0.48531051  },
	/*19*/	{ 0.48564172	, 0.485966697	, 0.486285525	, 0.486598291	, 0.486905078	, 0.48720597	, 0.487501052	, 0.487790407	, 0.488074118	, 0.488352266 },
	/*20*/	{ 0.488624934	, 0.488892203	, 0.489154153	, 0.489410865	, 0.489662419	, 0.489908892	, 0.490150365	, 0.490386914	, 0.490618617	, 0.49084555  },
	/*21*/	{ 0.49106779	, 0.491285411	, 0.491498489	, 0.491707097	, 0.491911308	, 0.492111196	, 0.492306833	, 0.492498289	, 0.492685635	, 0.492868941 },
	/*22*/	{ 0.493048276	, 0.493223709	, 0.493395308	, 0.493563139	, 0.493727269	, 0.493887764	, 0.494044687	, 0.494198104	, 0.494348078	, 0.494494671 },
	/*23*/	{ 0.494637945	, 0.494777961	, 0.494914781	, 0.495048462	, 0.495179065	, 0.495306647	, 0.495431266	, 0.495552979	, 0.49567184	, 0.495787907 },
	/*24*/	{ 0.495901232	, 0.49601187	, 0.496119873	, 0.496225294	, 0.496328185	, 0.496428595	, 0.496526575	, 0.496622174	, 0.49671544	, 0.496806423 },
	/*25*/	{ 0.496895167	, 0.496981721	, 0.497066129	, 0.497148437	, 0.497228688	, 0.497306927	, 0.497383196	, 0.497457537	, 0.497529992	, 0.497600602 },
	/*26*/	{ 0.497669406	, 0.497736444	, 0.497801756	, 0.497865378	, 0.497927349	, 0.497987706	, 0.498046484	, 0.498103719	, 0.498159446	, 0.4982137	  },
	/*27*/	{ 0.498266513	, 0.49831792	, 0.498367952	, 0.498416642	, 0.49846402	, 0.498510118	, 0.498554966	, 0.498598593	, 0.498641028	, 0.498682299 },
	/*28*/	{ 0.498722435	, 0.498761463	, 0.498799409	, 0.4988363		, 0.498872162	, 0.498907019	, 0.498940897	, 0.498973821	, 0.499005812	, 0.499036895 },
	/*29*/	{ 0.499067093	, 0.499096428	, 0.499124922	, 0.499152595	, 0.499179469	, 0.499205565	, 0.499230902	, 0.499255501	, 0.499279379	, 0.499302556 },
	/*30*/	{ 0.499325051	, 0.499346881	, 0.499368063	, 0.499388616	, 0.499408555	, 0.499427897	, 0.499446658	, 0.499464853	, 0.499482499	, 0.499499609 },
	/*31*/	{ 0.499516198	, 0.499532282	, 0.499547872	, 0.499562984	, 0.49957763	, 0.499591824	, 0.499605577	, 0.499618903	, 0.499631812	, 0.499644318 },
	/*32*/	{ 0.499656431	, 0.499668163	, 0.499679524	, 0.499690524	, 0.499701176	, 0.499711487	, 0.499721469	, 0.499731131	, 0.499740482	, 0.499749532 },
	/*33*/	{ 0.499758288	, 0.49976676	, 0.499774956	, 0.499782885	, 0.499790554	, 0.499797971	, 0.499805144	, 0.49981208	, 0.499818785	, 0.499825268 },
	/*34*/	{ 0.499831535	, 0.499837593	, 0.499843447	, 0.499849105	, 0.499854571	, 0.499859853	, 0.499864956	, 0.499869885	, 0.499874647	, 0.499879245 },
};

void stdev2index(const double stdev, int& x, int& y);

//	정규 분포에서 신뢰 수준에 해당하는 표준편차 구함.(Z 값)
double get_norm_sinv(const double probability);

//	정규 분포에서 표준편차에 해당하는 신뢰 수준 구함.(confidence level or probability)
double get_norm_sdist(const double stdev);

class DllExport CRunningStats
{
public:
	CRunningStats();

	void Clear();
	void Push(double x);
	void Pop(double x);
	void PopPush(double old_x, double x);
	long NumDataValues() const;
	double Mean() const;
	double Variance() const;
	double StandardDeviation() const;
	double NORMINV(double probability);
	double Sigma1Up();
	double Sigma2Up();
	double Sigma3Up();
	double Sigma1Down();
	double Sigma2Down();
	double Sigma3Down();
	double Skewness() const;
	double Kurtosis() const;
	double Standardize(double x);	//	x 값을 현재 stats 클래스의 평균과 표준 편차에 대한 정규화 x값 리턴.
	void Confidence(const double confidence_level, double& upper, double& lower);
	// Probability density function
	double pdf(const double& x) const;
	// Cumulative density function(normal distribution)
	double cdf(const double& x) const;
	// 신뢰도 환산
	double Probability(const double& x)
	{
		return cdf(x) * 2. - 1.;
	}
	// Inverse cumulative distribution function (aka the probit function)
	double inv_cdf(const double& quantile) const;

	CRunningStats& operator=(const CRunningStats& rs)
	{
		n = rs.n;
		M1 = rs.M1;
		M2 = rs.M2;
		M3 = rs.M3;
		M4 = rs.M4;

		return *this;
	}

	friend CRunningStats operator+(const CRunningStats a, const CRunningStats b);
	CRunningStats& operator+=(const CRunningStats &rhs);

//private:
	long	n;	//	개수 
	double M1;	//	평균
	double M2;	//	평균 차의 합(Σ (X - μ)
	double M3;
	double M4;
};